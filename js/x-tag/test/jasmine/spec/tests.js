describe("x-tag ",function(){it("should load x-tag and fire DOMComponentsLoaded",function(){var e=!1;document.addEventListener("DOMComponentsLoaded",function(){e=!0}),runs(function(){var e=document.createElement("script");e.type="text/javascript",e.src="../../x-tag.js?d="+(new Date).getTime(),document.getElementsByTagName("head")[0].appendChild(e)}),waitsFor(function(){return e},"The document should be loaded",1e3),runs(function(){expect(window.xtag).toBeDefined()})}),it("should register a new tag",function(){xtag.register("x-foo",{}),expect(xtag.tags["x-foo"]).toBeDefined()}),it("should fire onCreate when a new tag is created",function(){var e=!1;xtag.register("x-foo",{onCreate:function(){e=!0}});var t=document.createElement("x-foo");waitsFor(function(){return e},"new tag onCreate should fire",1e3),runs(function(){expect(e).toEqual(!0)})}),describe("using testbox",function(){var e;beforeEach(function(){e=document.getElementById("testbox")}),afterEach(function(){e.innerHTML=""}),it("testbox should exist",function(){expect(e).toBeDefined()}),it("should fire onInsert when tag is added to innerHTML",function(){var t=!1;xtag.register("x-foo",{onInsert:function(){t=!0},methods:{bar:function(){return!0}}}),e.innerHTML='<x-foo id="foo"></x-foo>',waitsFor(function(){return t},"new tag onInsertFired should fire",1e3),runs(function(){var e=document.getElementById("foo");expect(t).toEqual(!0),expect(e.bar()).toEqual(!0)})}),it("should fire onInsert when injected into the DOM",function(){var e=!1;xtag.register("x-foo",{onInsert:function(){e=!0}});var t=document.createElement("x-foo");testbox.appendChild(t),waitsFor(function(){return e},"new tag onInsert should fire",1e3),runs(function(){expect(e).toEqual(!0)})}),it("should parse new tag as soon as it is registered",function(){var e=document.createElement("x-foo2");testbox.appendChild(e),expect(e.xtag).toBeUndefined(),xtag.register("x-foo2",{}),expect(e.xtag).toBeDefined()}),it("should register methods for element",function(){xtag.register("x-foo",{methods:{baz:function(){}}});var e=document.createElement("x-foo");testbox.appendChild(e),expect(e.baz).toBeDefined()}),it("should register getters for element",function(){xtag.register("x-foo",{getters:{name:function(){return this.nodeName}}});var e=document.createElement("x-foo");testbox.appendChild(e),expect(e.name).toEqual("X-FOO")}),it("should register setters for element",function(){xtag.register("x-foo",{setters:{name:function(e){this.setAttribute("name",e)}}});var e=document.createElement("x-foo");testbox.appendChild(e),e.name="pizza",expect(e.getAttribute("name")).toEqual("pizza")}),it("xtag.innerHTML should instantiate x-tags in innerHTML",function(){xtag.register("x-foo",{setters:{name:function(e){this.setAttribute("name",e)}}}),xtag.innerHTML(testbox,'<x-foo id="foo"></x-foo>');var e=document.getElementById("foo");e.name="Bob",expect(e.getAttribute("name")).toEqual("Bob")}),it("should only fire onInsert when inserted into the DOM",function(){var e=!1;xtag.register("x-foo",{onInsert:function(){e=!e}});var t=document.createElement("div");t.appendChild(document.createElement("x-foo")),expect(e).toEqual(!1),testbox.appendChild(t),waitsFor(function(){return e},"new tag onInsert should fire",1e3),runs(function(){expect(e).toEqual(!0)})}),it("should replace innerHTML with content",function(){var e=!1,t=document.createElement("x-foo3");t.innerHTML="<li>raw</li><li>raw2</li>",testbox.appendChild(t),xtag.register("x-foo3",{content:"<ul><content></content></ul>",onInsert:function(){e=!0}}),waitsFor(function(){return e},"inserted",1e3),runs(function(){expect("<ul><li>raw</li><li>raw2</li></ul>").toEqual(t.innerHTML)})}),it("should replace innerHTML with content using select attribute",function(){var e=!1,t=document.createElement("x-foo4");t.innerHTML="<li>raw</li><li>raw2</li>",testbox.appendChild(t),xtag.register("x-foo4",{content:'<ul><content select="li"></content></ul>',onInsert:function(){e=!0}}),waitsFor(function(){return e},"inserted",1e3),runs(function(){expect("<ul><li>raw</li><li>raw2</li></ul>").toEqual(t.innerHTML)})}),it("should replace innerHTML with content and throw away any non-matching children",function(){var e=!1,t=document.createElement("x-foo5");t.innerHTML="<li>raw</li><li>raw2</li><blah>k</blah>",testbox.appendChild(t),xtag.register("x-foo5",{content:'<ul><content select="li"></content></ul>',onInsert:function(){e=!0}}),waitsFor(function(){return e},"inserted",1e3),runs(function(){expect("<ul><li>raw</li><li>raw2</li></ul>").toEqual(t.innerHTML)})}),it("should replace innerHTML with content using multiple content nodes with a catch all",function(){var e=!1,t=document.createElement("x-foo6");t.innerHTML="<li>raw</li><li>raw2</li><blah>k</blah>",testbox.appendChild(t),xtag.register("x-foo6",{content:'<ul><content select="li"></content></ul><ul><content></content></ul>',onInsert:function(){e=!0}}),waitsFor(function(){return e},"inserted",1e3),runs(function(){expect("<ul><li>raw</li><li>raw2</li></ul><ul><blah>k</blah></ul>").toEqual(t.innerHTML)})}),it("should replace innerHTML with content using multiple content nodes",function(){var e=!1,t=document.createElement("x-foo7");t.innerHTML="<li>raw</li><li>raw2</li><blah>k</blah>",testbox.appendChild(t),xtag.register("x-foo7",{content:'<ul><content select="li"></content></ul><ul><content select="blah"></content></ul>',onInsert:function(){e=!0}}),waitsFor(function(){return e},"inserted",1e3),runs(function(){expect("<ul><li>raw</li><li>raw2</li></ul><ul><blah>k</blah></ul>").toEqual(t.innerHTML)})}),it("should create a mixin, fire onCreate",function(){var e=!1;xtag.mixins.test={onCreate:function(){e=!0}},xtag.register("x-foo",{mixins:["test"]});var t=document.createElement("x-foo");expect(!0).toEqual(e)}),it("should create a mixin, fire onInsert",function(){var e=!1;xtag.mixins.test={onInsert:function(){e=!0}},xtag.register("x-foo",{mixins:["test"]});var t=document.createElement("x-foo");testbox.appendChild(t),waitsFor(function(){return e},"new tag mixin onInsert should fire",1e3),runs(function(){expect(!0).toEqual(e)})}),it("should allow mixins to create getters",function(){xtag.mixins.test={getters:{foo:function(){return"barr"}}},xtag.register("x-foo",{mixins:["test"]});var e=document.createElement("x-foo");expect("barr").toEqual(e.foo)}),it("should allow mixins to create setters",function(){xtag.mixins.test={setters:{foo:function(e){this.setAttribute("foo",e)}}},xtag.register("x-foo",{mixins:["test"]});var e=document.createElement("x-foo");e.foo="barr",expect("barr").toEqual(e.getAttribute("foo"))}),it("delegate event pseudo should pass the custom element as second param",function(){var e=null;xtag.register("x-foo",{onCreate:function(){this.innerHTML="<div></div>"},events:{"click:delegate(div)":function(t,n){e=n}}});var t=document.createElement("x-foo");testbox.appendChild(t),xtag.fireEvent(xtag.query(t,"div")[0],"click"),expect(t).toEqual(e)}),it("delegate event pseudo should catch click from inner element",function(){var e=!1;xtag.register("x-foo",{onCreate:function(){this.innerHTML="<div></div>"},events:{"click:delegate(div)":function(t,n){e=!0}}});var t=document.createElement("x-foo");testbox.appendChild(t),xtag.fireEvent(xtag.query(t,"div")[0],"click"),expect(e).toEqual(!0)}),it('delegate event pseudo "this" should be the element filtered by pseudo',function(){var e=null;xtag.register("x-foo",{onCreate:function(){this.innerHTML="<div></div>"},events:{"click:delegate(div)":function(t,n){e=this}}});var t=document.createElement("x-foo");testbox.appendChild(t);var n=xtag.query(t,"div")[0];xtag.fireEvent(n,"click"),expect(n).toEqual(e)}),it("delegate event pseudo should support chaining",function(){var e=null;xtag.register("x-foo",{onCreate:function(){this.innerHTML="<div><foo><bazz></bazz></foo></div>"},events:{"click:delegate(div):delegate(bazz)":function(t,n){e=this}}});var t=document.createElement("x-foo");testbox.appendChild(t);var n=xtag.query(t,"bazz")[0];xtag.fireEvent(n,"click"),expect(n).toEqual(e)}),it("x-tag pseudos should allow css pseudos",function(){var e=null;xtag.register("x-foo",{onCreate:function(){this.innerHTML="<div><foo><bazz><button></button></bazz></foo></div>"},events:{"click:delegate(div):delegate(bazz:first-child)":function(t,n){e=this}}});var t=document.createElement("x-foo");testbox.appendChild(t);var n=xtag.query(t,"button")[0];xtag.fireEvent(n,"click"),expect(n).toEqual(e.childNodes[0])}),it("custom event pseudo should fire",function(){var e=!1,t=null;xtag.pseudos.blah={listener:function(t,n,r){e=!0,r[0].foo=this,n.apply(this,r)}},xtag.register("x-foo",{onCreate:function(){this.innerHTML="<div><foo><bazz></bazz></foo></div>"},events:{"click:delegate(div):blah:delegate(bazz)":function(e,n){t=this}}});var n=document.createElement("x-foo");testbox.appendChild(n);var r=xtag.query(n,"bazz")[0];xtag.fireEvent(r,"click"),expect(e).toEqual(!0),expect(r).toEqual(t)})}),describe("helper methods",function(){describe("class",function(){var e;beforeEach(function(){e=document.body}),afterEach(function(){e.removeAttribute("class")}),it("hasClass",function(){expect(xtag.hasClass(e,"foo")).toEqual(!1),e.setAttribute("class","foo"),expect(xtag.hasClass(e,"foo")).toEqual(!0)}),it("addClass",function(){expect(xtag.hasClass(e,"foo")).toEqual(!1),xtag.addClass(e,"foo"),expect(xtag.hasClass(e,"foo")).toEqual(!0),xtag.addClass(e,"bar"),expect(xtag.hasClass(e,"bar")).toEqual(!0),expect("foo bar").toEqual(e.getAttribute("class")),expect(2).toEqual(e.getAttribute("class").split(" ").length),xtag.addClass(e,"biz red"),expect("foo bar biz red").toEqual(e.getAttribute("class")),xtag.addClass(e,"foo red"),expect("foo bar biz red foo red").toEqual(e.getAttribute("class"))}),it("removeClass",function(){xtag.addClass(e,"foo"),xtag.addClass(e,"bar"),xtag.addClass(e,"baz"),expect("foo bar baz").toEqual(e.getAttribute("class")),xtag.removeClass(e,"bar"),expect("foo baz").toEqual(e.getAttribute("class")),xtag.addClass(e,"bar"),expect("foo baz bar").toEqual(e.getAttribute("class")),xtag.removeClass(e,"foo"),expect("baz bar").toEqual(e.getAttribute("class")),xtag.removeClass(e,"baz"),expect("bar").toEqual(e.getAttribute("class")),xtag.removeClass(e,"random"),e.setAttribute("class","  foo  bar baz   red   "),xtag.removeClass(e,"bar"),expect("foo baz red").toEqual(e.getAttribute("class"))}),it("toggleClass",function(){xtag.toggleClass(e,"foo"),expect("foo").toEqual(e.getAttribute("class")),xtag.toggleClass(e,"foo"),expect("").toEqual(e.getAttribute("class")),xtag.addClass(e,"baz"),xtag.toggleClass(e,"baz"),expect("").toEqual(e.getAttribute("class"))}),it("Random combination of Class tests",function(){e.setAttribute("class","flex-stack"),xtag.addClass(e,"small_desktop"),expect("flex-stack small_desktop").toEqual(e.getAttribute("class")),e.setAttribute("class","flex-stack"),xtag.addClass(e,"small_desktop"),xtag.removeClass(e,"small_desktop"),expect("flex-stack").toEqual(e.getAttribute("class")),e.setAttribute("class","small_desktop flex-stack"),xtag.removeClass(e,"small_desktop"),expect("flex-stack").toEqual(e.getAttribute("class")),e.setAttribute("class","small_desktop flex-stack"),xtag.removeClass(e,"small_desktop"),xtag.removeClass(e,"large_desktop"),expect("flex-stack").toEqual(e.getAttribute("class"))})}),describe("utils",function(){it("typeOf",function(){expect("object").toEqual(xtag.typeOf({})),expect("array").toEqual(xtag.typeOf([])),expect("string").toEqual(xtag.typeOf("d")),expect("number").toEqual(xtag.typeOf(42))}),it("toArray",function(){expect([]).toEqual(xtag.toArray({})),expect(["42"]).toEqual(xtag.toArray("42")),expect([42]).toEqual(xtag.toArray(42)),expect([2,3]).toEqual(xtag.toArray([2,3]));var e=function(){};expect([e]).toEqual(xtag.toArray(e))})})})})